% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{cr_works2}
\alias{cr_works2}
\title{Get Crossref Works}
\usage{
cr_works2(x, ...)
}
\arguments{
\item{x}{A vector created by, or convertable to \code{\link[biblids:doi]{doi()}}.}

\item{...}{
  Arguments passed on to \code{\link[rcrossref:cr_works]{rcrossref::cr_works}}
  \describe{
    \item{\code{dois}}{Search by a single DOI or many DOIs.  Note that using this
parameter at the same time as the \code{query}, \code{limit}, \code{select} or \code{flq}
parameter will result in an error.}
    \item{\code{query}}{Query terms}
    \item{\code{filter}}{Filter options. See examples for usage examples
and \code{\link[rcrossref]{filters}} for what filters are available.
\code{filter} is available for use with \code{cr_works} and
other \code{crossref} family functions with \code{works=TRUE}}
    \item{\code{offset}}{Number of record to start at. Minimum: 1. For
\code{\link[rcrossref]{cr_works}}, and any function setting \code{works = TRUE},
the maximum offset value is 10000. For larger requests use \code{cursor}.}
    \item{\code{limit}}{Number of results to return in the query. Not relavant when
searching with specific dois. Default: 20. Max: 1000}
    \item{\code{sample}}{(integer) Number of random results to return. when you use
the sample parameter, the rows and offset parameters are ignored.
Ignored unless \code{works=TRUE}. Max: 100}
    \item{\code{sort}}{Field to sort on. Acceptable set of fields to sort on:
\itemize{
\item \code{score} OR \code{relevance} - Sort by relevance score
\item \code{updated} - Sort by date of most recent change to metadata.
Currently the same as deposited.
\item \code{deposited} - Sort by time of most recent deposit
\item \code{indexed} - Sort by time of most recent index
\item \code{published} - Sort by publication date
\item \code{published-print} - Sort by print publication date
\item \code{published-online} - Sort by online publication date
\item \code{issued} - Sort by issued date (earliest known publication date)
\item \code{is-referenced-by-count} - Sort by number of times this DOI is
referenced by other Crossref DOIs
\item \code{references-count} - Sort by number of references included in
the references section of the document identified by this DOI
}}
    \item{\code{order}}{(character) Sort order, one of 'asc' or 'desc'}
    \item{\code{facet}}{(logical) Include facet results. Boolean or string with
field to facet on. Valid fields are *, affiliation, funder-name,
funder-doi, orcid, container-title, assertion, archive, update-type,
issn, published, source, type-name, publisher-name, license,
category-name, assertion-group. Default: \code{FALSE}}
    \item{\code{cursor}}{(character) Cursor character string to do deep paging.
Default is None. Pass in '*' to start deep paging. Any combination of
query, filters and facets may be used with deep paging cursors.
While the \code{limit} parameter may be specified along with cursor,
offset and sample cannot be used with the cursor. See
https://github.com/CrossRef/rest-api-doc#deep-paging-with-cursors}
    \item{\code{cursor_max}}{(integer) Max records to retrieve. Only used when
cursor param used. Because deep paging can result in continuous requests
until all are retrieved, use this parameter to set a maximum number of
records. Of course, if there are less records found than this value,
you will get only those found. When cursor pagination is being used
the \code{limit} parameter sets the chunk size per request.}
    \item{\code{.progress}}{Show a \code{plyr}-style progress bar? Options are "none", "text",
"tk", "win", and "time".  See \code{\link[plyr]{create_progress_bar}} for details
of each. Only used when passing in multiple ids (e.g., multiple DOIs, DOI prefixes,
etc.), or when using the \code{cursor} param. When using the \code{cursor} param,
this argument only accept a boolean, either \code{TRUE} or \code{FALSE}; any
non-boolean is coerced to \code{FALSE}.}
    \item{\code{flq}}{field queries. One or more field queries. Acceptable set of
field query parameters are:
\itemize{
\item \code{query.container-title}    - Query container-title aka.
publication name
\item \code{query.author} - Query author first and given names
\item \code{query.editor} - Query editor first and given names
\item \code{query.chair}    - Query chair first and given names
\item \code{query.translator} - Query translator first and given names
\item \code{query.contributor} - Query author, editor, chair and
translator first and given names
\item \code{query.bibliographic} - Query bibliographic information, useful
for citation lookup. Includes titles, authors, ISSNs and publication years
\item \code{query.affiliation} - Query contributor affiliations
}

Note: \code{query.title} has been removed - use \code{query.bibliographic}
as a replacement}
    \item{\code{select}}{(character) One or more field to return (only those fields
are returned)}
    \item{\code{async}}{(logical) use async HTTP requests. Default: \code{FALSE}}
  }}
}
\description{
Type-/length-stable, defensive and cached variant of \code{\link[rcrossref:cr_works]{rcrossref::cr_works()}}.
}
\details{
This wrapper changes the underlying behavior as follows:
\itemize{
\item vectorised by \code{\link[purrr:map]{purrr::map_dfr()}}
\item all warnings and empty returned rows are raised to errors
\item returns type stably and length stably (in rows)
\item caches \emph{individual} DOI results
\item retries on failed attempts
\item returns only the data element
}

This function is still \emph{defensive};
it will error out if attempts fail or inputs are bad.
That is what makes it type stable/length stable.
It is the callers responsibility to use \code{\link[purrr:safely]{purrr::possibly()}},
and recover from errors by giving some \code{otherwise} default.
This cannot be done here,
because the caller must determine what a useful default is.
This weirdness can be resolved when we always test
and return individual fields as per
https://github.com/subugoe/metacheck/issues/183.
}
\seealso{
Other import: 
\code{\link{get_cr_md}()},
\code{\link{pretests}()}
}
\concept{import}
\keyword{internal}
