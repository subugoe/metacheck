% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/email.R
\name{email}
\alias{email}
\alias{mc_compose_email}
\alias{mc_compose_email_outer}
\alias{mc_render_email}
\alias{render_and_send}
\alias{render_and_send_async}
\alias{smtp_send_mc}
\title{Send metacheck results as an parametrised email}
\usage{
mc_compose_email(translator = mc_translator(), ...)

mc_compose_email_outer(body = "Lorem", translator = mc_translator())

mc_render_email(
  dois = doi_examples$good[1:10],
  translator = mc_translator(),
  session_id = NULL,
  ...
)

render_and_send(to, translator = mc_translator(), ...)

render_and_send_async(...)

smtp_send_mc(
  email = blastula::prepare_test_message(),
  to = throwaway,
  from = "metacheck-support@sub.uni-goettingen.de",
  credentials = creds_metacheck(),
  translator = mc_translator(),
  ...
)
}
\arguments{
\item{translator}{A \link[shiny.i18n:Translator]{shiny.i18n::Translator} object or \code{NULL} for english-only defaults.
Strings inside the module UI are marked as translateable.
You can pass a translator object included in the package,
or can create your own \code{translator} using \link[shiny.i18n:Translator]{shiny.i18n::Translator}.
This must not be a reactive, it is only set at shiny startup.
To update the language reactively \emph{during} a shiny session, see \code{lang}.}

\item{...}{
  Arguments passed on to \code{\link[=mc_render_email]{mc_render_email}}, \code{\link[blastula:render_email]{blastula::render_email}}, \code{\link[=mc_compose_email]{mc_compose_email}}, \code{\link[blastula:smtp_send]{blastula::smtp_send}}
  \describe{
    \item{\code{input}}{The input file to be rendered. This should be an R Markdown
document (.Rmd) with the output specified as \code{output: blastula::blastula_email}.}
    \item{\code{envir}}{The environment in which the code chunks are to be evaluated
during knitting.}
    \item{\code{quiet}}{An option to suppress printing of the command line output from
Pandoc during rendering. By default, this is set to \code{TRUE}.}
    \item{\code{output_options}}{Lists of options can be used to augment
the rendering of the email message. The \code{output_options} list will be
passed as the \code{output_options} argument of \code{rmarkdown::render()}. The
\code{render_options} list is for providing additional arguments to
\code{rmarkdown::render()}. By default, both lists are empty.}
    \item{\code{render_options}}{Lists of options can be used to augment
the rendering of the email message. The \code{output_options} list will be
passed as the \code{output_options} argument of \code{rmarkdown::render()}. The
\code{render_options} list is for providing additional arguments to
\code{rmarkdown::render()}. By default, both lists are empty.}
    \item{\code{subject}}{The subject of the message, which is usually a brief summary
of the topic of the message. If not provided, an empty string will be used
(which is handled differently by email clients).}
    \item{\code{cc}}{A vector of email addresses for sending the message as a carbon
copy or blind carbon copy. The CC list pertains to recipients that are to
receive a copy of a message that is addressed primarily to others. The CC
listing of recipients is visible to all other recipients of the message.
The BCC list differs in that those recipients will be concealed from all
other recipients (including those on the BCC list). A named character
vector can be used to specify the recipient names along with the their
email address (e.g., \code{c("Joe Public" = "joe_public@example.com")}).}
    \item{\code{bcc}}{A vector of email addresses for sending the message as a carbon
copy or blind carbon copy. The CC list pertains to recipients that are to
receive a copy of a message that is addressed primarily to others. The CC
listing of recipients is visible to all other recipients of the message.
The BCC list differs in that those recipients will be concealed from all
other recipients (including those on the BCC list). A named character
vector can be used to specify the recipient names along with the their
email address (e.g., \code{c("Joe Public" = "joe_public@example.com")}).}
    \item{\code{creds_file}}{An option to specify a credentials file. As this argument
is deprecated, please consider using \verb{credentials = creds_file(<file>)}
instead.}
    \item{\code{verbose}}{Should verbose output from the internal curl \code{send_mail()}
call be printed? While the username and password will likely be echoed
during the exchange, such information is encoded and won't be stored on
the user's system.}
  }}

\item{body}{The three layout sections for an email message
(ordered from top to bottom). Markdown text can be supplied to each of
these by using the \code{\link[blastula:md]{md()}} text helper function. Alternatively, we can
supply a set of \verb{block_*()} calls enclosed within the \code{\link[blastula:blocks]{blocks()}} function
to take advantage of precomposed HTML blocks.}

\item{dois}{Vector of DOIs, as created by, or coerceable to \code{\link[biblids:doi]{biblids::doi()}}.}

\item{session_id}{Character vector to identify current shiny session}

\item{to}{A vector of email addresses serving as primary recipients for the
message. For secondary recipients, use the \code{cc} and \code{bcc} arguments. A
named character vector can be used to specify the recipient names along
with the their email address (e.g., \code{c("Jane Doe" = "jane_doe@example.com")}).}

\item{email}{The email message object, as created by the \code{\link[blastula:compose_email]{compose_email()}}
function. The object's class is \code{email_message}.}

\item{from}{The email address of the sender. Often this needs to be the same
email address that is associated with the account actually sending the
message. As with \code{to}, \code{cc}, and \code{bcc}, we can either supply a single email
address or use a named character vector with the sender name and email
address (e.g., \code{c("John Doe" = "john_doe@example.com")}).}

\item{credentials}{One of three credential helper functions must be used
here: (1) \code{\link[blastula:credential_helpers]{creds()}}, (2) \code{\link[blastula:credential_helpers]{creds_key()}}, or (3) \code{\link[blastula:credential_helpers]{creds_file()}}. The first,
\code{\link[blastula:credential_helpers]{creds()}}, allows for a manual specification of SMTP configuration and
credentials within that helper function. This is the most secure method for
supplying credentials as they aren't written to disk. The \code{\link[blastula:credential_helpers]{creds_key()}}
function is used if credentials are stored in the system-wide key-value
store, through use of the \code{\link[blastula:create_smtp_creds_key]{create_smtp_creds_key()}} function. The
\code{\link[blastula:credential_helpers]{creds_file()}} helper function relies on a credentials file stored on disk.
Such a file is created using the \code{\link[blastula:create_smtp_creds_file]{create_smtp_creds_file()}} function.}
}
\description{
Send metacheck results as an parametrised email
}
\section{Related Functions and Methods}{
\subsection{Functions}{
\itemize{
\item \code{mc_compose_email}: Compose complete mail
}
\itemize{
\item \code{mc_compose_email_outer}: Wrap inner email in outer content
}
\itemize{
\item \code{mc_render_email}: Render email body (inner content)
}
\itemize{
\item \code{render_and_send}: Render and send
}
\itemize{
\item \code{render_and_send_async}: Render and send asynchronously
}
\itemize{
\item \code{smtp_send_mc}: Send
}}}

\seealso{
Other communicate: 
\code{\link{emailReport}()},
\code{\link{mcApp}()},
\code{\link{mcControls}},
\code{\link{report}},
\code{\link{runMetacheck}()}
}
\concept{communicate}
